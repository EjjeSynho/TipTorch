aofpseeing = dlt.query_ts('wmfsgw', 'AOS.CNSQ.SEEINGTOT', initial_time, final_time)
aofpL0 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.L0TOT', initial_time, final_time)
aofpR0 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.R0TOT', initial_time, final_time)
aofpH1 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.H1', initial_time, final_time)
aofpH2 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.H2', initial_time, final_time)
aofpH3 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.H3', initial_time, final_time)
aofpH4 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.H4', initial_time, final_time)
aofpH5 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.H5', initial_time, final_time)
aofpH6 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.H6', initial_time, final_time)
aofpH7 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.H7', initial_time, final_time)
aofpH8 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.H8', initial_time, final_time)
aofpH9 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.H9', initial_time, final_time)
aofpH10 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.H10', initial_time, final_time)
aofpCn21 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.CNSQ_1', initial_time, final_time)
aofpCn22 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.CNSQ_2', initial_time, final_time)
aofpCn23 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.CNSQ_3', initial_time, final_time)
aofpCn24 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.CNSQ_4', initial_time, final_time)
aofpCn25 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.CNSQ_5', initial_time, final_time)
aofpCn26 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.CNSQ_6', initial_time, final_time)
aofpCn27 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.CNSQ_7', initial_time, final_time)
aofpCn28 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.CNSQ_8', initial_time, final_time)
aofpCn29 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.CNSQ_9', initial_time, final_time)
aofpCn210 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.CNSQ_10', initial_time, final_time)
aofpL01 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.L0_1', initial_time, final_time)
aofpL02 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.L0_2', initial_time, final_time)
aofpL03 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.L0_3', initial_time, final_time)
aofpL04 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.L0_4', initial_time, final_time)
aofpL05 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.L0_5', initial_time, final_time)
aofpL06 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.L0_6', initial_time, final_time)
aofpL07 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.L0_7', initial_time, final_time)
aofpL08 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.L0_8', initial_time, final_time)
aofpL09 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.L0_9', initial_time, final_time)
aofpL010 = dlt.query_ts('wmfsgw', 'AOS.CNSQ.L0_10', initial_time, final_time)


ut4alt = dlt.query_ts('wt4tcs', 'TEL.ALT.POS', initial_time, final_time)
ut4az = dlt.query_ts('wt4tcs', 'TEL.AZ.POS', initial_time, final_time)
ut4fwhm = dlt.query_ts('wt4tcs', 'TEL.AMBI.FWHM', initial_time, final_time)


aofpmonitor = dlt.pair_and_merge( [aofpseeing,aofpL0,aofpR0,aofpH1,aofpH2,aofpH3,aofpH4,aofpH5,aofpH6,
    aofpH7,aofpH8,aofpH9,aofpH10,aofpCn21,aofpCn22,aofpCn23,aofpCn24,aofpCn25,
    aofpCn26,aofpCn27,aofpCn28,aofpCn29,aofpCn210,aofpL01,aofpL02,aofpL03,aofpL04,
    aofpL05,aofpL06,aofpL07,aofpL08,aofpL09,aofpL010,
    lgs1flux,lgs2flux,lgs3flux,lgs4flux,
    lgs1seeing,lgs2seeing,lgs3seeing,lgs4seeing,
    ngsflux,ngsttrmsx,ngsttrmsy,ngsstate,ut4alt,ut4az,ut4fwhm],

names=['AOS.CNSQ.SEEINGTOT','AOS.CNSQ.L0TOT','AOS.CNSQ.R0TOT',
       'AOS.CNSQ.H1','AOS.CNSQ.H2','AOS.CNSQ.H3','AOS.CNSQ.H4','AOS.CNSQ.H5',
       'AOS.CNSQ.H6','AOS.CNSQ.H7','AOS.CNSQ.H8','AOS.CNSQ.H9','AOS.CNSQ.H10',
       'AOS.CNSQ.CNSQ_1','AOS.CNSQ.CNSQ_2','AOS.CNSQ.CNSQ_3','AOS.CNSQ.CNSQ_4',
       'AOS.CNSQ.CNSQ_5','AOS.CNSQ.CNSQ_6','AOS.CNSQ.CNSQ_7','AOS.CNSQ.CNSQ_8',
       'AOS.CNSQ.CNSQ_9','AOS.CNSQ.CNSQ_10',
       'AOS.CNSQ.L0_1','AOS.CNSQ.L0_2','AOS.CNSQ.L0_3','AOS.CNSQ.L0_4',
       'AOS.CNSQ.L0_5','AOS.CNSQ.L0_6','AOS.CNSQ.L0_7','AOS.CNSQ.L0_8',
       'AOS.CNSQ.L0_9','AOS.CNSQ.L0_10',
       'AOS.LGS1.FLUX','AOS.LGS2.FLUX','AOS.LGS3.FLUX','AOS.LGS4.FLUX',
       'AOS.LGS1.SEEING','AOS.LGS2.SEEING','AOS.LGS3.SEEING','AOS.LGS4.SEEING',
       'AOS.NGS.FLUX','AOS.NGS.TTRMS.X','AOS.NGS.TTRMS.Y','AOS.VISCTR.SUBSTATE',
       'TEL.ALT.POS','TEL.AZ.POS','TEL.AMBI.FWHM'], kind='linear')


lgs1seeing = dlt.query_ts('wmfsgw', 'AOS.LGS1.SEEING', initial_time, final_time)
lgs2seeing = dlt.query_ts('wmfsgw', 'AOS.LGS2.SEEING', initial_time, final_time)
lgs3seeing = dlt.query_ts('wmfsgw', 'AOS.LGS3.SEEING', initial_time, final_time)
lgs4seeing = dlt.query_ts('wmfsgw', 'AOS.LGS4.SEEING', initial_time, final_time)

lgs1L0 = dlt.query_ts('wmfsgw', 'AOS.LGS1.L0', initial_time, final_time)
lgs2L0 = dlt.query_ts('wmfsgw', 'AOS.LGS2.L0', initial_time, final_time)
lgs3L0 = dlt.query_ts('wmfsgw', 'AOS.LGS3.L0', initial_time, final_time)
lgs4L0 = dlt.query_ts('wmfsgw', 'AOS.LGS4.L0', initial_time, final_time)

lgs1R0 = dlt.query_ts('wmfsgw', 'AOS.LGS1.R0', initial_time, final_time)
lgs2R0 = dlt.query_ts('wmfsgw', 'AOS.LGS2.R0', initial_time, final_time)
lgs3R0 = dlt.query_ts('wmfsgw', 'AOS.LGS3.R0', initial_time, final_time)
lgs4R0 = dlt.query_ts('wmfsgw', 'AOS.LGS4.R0', initial_time, final_time)

ut4alt = dlt.query_ts('wt4tcs', 'TEL.ALT.POS', initial_time, final_time)

For the wind speed and direction:
wspeed = dlt.query_ts('wt4tcs', 'TEL.AMBI.WINDSP', initial_time, final_time)
wdir = dlt.query_ts('wt4tcs', 'TEL.AMBI.WINDDIR', initial_time, final_time)



I have this one for the flux in IRLOS:
ngsflux = dlt.query_ts('wmfsgw', 'AOS.NGS.FLUX', initial_time, final_time)

The LGS is in ADU/frame/sub-aperture


It is indeed per frame, but the values is first average over 1s (so 1000 frames) in order to reduce the noise I guess

To go to photons/m^2/s at M1 level, I do the following:

% Return flux from LGS lasers in photons/m^2/s @ M1 level
% LGS flux in ADU/frame/sub-aperture
% Detector conversion factor:   18 e-/ADU
% Number of sub-apertures:      1240
% Detector gain:                100
% Detector QE:                  0.9
% GALACSI transmission:         0.31 (with VLT) / 0.46 (without VLT)
% Detector DIT:                 0.9804 ms (1 ms - 0.01982 ms of transfer
% M1 surface:                   49 m^2
lgsfmeani2 = (median(lgsfluxi2([lgsn],:),1))*18*1240/100/0.9/0.9804/0.31*1000/49;


[2/2/23 3:25 PM] Pierre Haguenauer
In the old IRLOS, there was this keyword:
ngsstate  = dlt.query_ts('wmfsgw', 'AOS.VISCTR.SUBSTATE', initial_time, final_time)

I think it was a number for each mode, but I don't remember what number corresponded to what. And that is probably different in the upgraded IRLOS. Probably a question to ask to Sylvain.
[2/2/23 3:26 PM] Arseniy Kuznetsov
Okay, I understood. Thanks again!
[2/2/23 3:30 PM] Pierre Haguenauer
I dug a bit, and actually the AOS.VISCTR.SUBSTATE tell you if the loop as closed or opened, not the mode,
[2/2/23 3:30 PM] Arseniy Kuznetsov
Oh
[2/2/23 3:52 PM] Pierre Haguenauer
My guess is that there is no keyword for the IRLOS freq and gain. When the OB is started, there is probably a SPARTA/IRLOS configuration that is setup. This defines the gain and freq, so it might no be logged. There might just be something logged each time the configuration is changed. 
[2/2/23 3:52 PM] Arseniy Kuznetsov
Okay, I will look for the configuration in MUSE headers actually